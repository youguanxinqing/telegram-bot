// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"telegram-bot/internal/ent/stardict"

	"entgo.io/ent/dialect/sql"
)

// StarDict is the model entity for the StarDict schema.
type StarDict struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Word holds the value of the "word" field.
	// 词汇
	Word string `json:"word,omitempty"`
	// Sw holds the value of the "sw" field.
	// 词汇
	Sw string `json:"sw,omitempty"`
	// Phonetic holds the value of the "phonetic" field.
	// 音标
	Phonetic string `json:"phonetic,omitempty"`
	// Definition holds the value of the "definition" field.
	// 定义
	Definition string `json:"definition,omitempty"`
	// Translation holds the value of the "translation" field.
	// 翻译
	Translation string `json:"translation,omitempty"`
	// Pos holds the value of the "pos" field.
	Pos string `json:"pos,omitempty"`
	// Collins holds the value of the "collins" field.
	// 柯林斯词汇等级
	Collins int `json:"collins,omitempty"`
	// Oxford holds the value of the "oxford" field.
	// 牛津词汇等级
	Oxford int `json:"oxford,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Bnc holds the value of the "bnc" field.
	Bnc int `json:"bnc,omitempty"`
	// Frq holds the value of the "frq" field.
	Frq int `json:"frq,omitempty"`
	// Exchange holds the value of the "exchange" field.
	Exchange string `json:"exchange,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Audio holds the value of the "audio" field.
	// 音频
	Audio string `json:"audio,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StarDict) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stardict.FieldID, stardict.FieldCollins, stardict.FieldOxford, stardict.FieldBnc, stardict.FieldFrq:
			values[i] = new(sql.NullInt64)
		case stardict.FieldWord, stardict.FieldSw, stardict.FieldPhonetic, stardict.FieldDefinition, stardict.FieldTranslation, stardict.FieldPos, stardict.FieldTag, stardict.FieldExchange, stardict.FieldDetail, stardict.FieldAudio:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StarDict", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StarDict fields.
func (sd *StarDict) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stardict.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case stardict.FieldWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word", values[i])
			} else if value.Valid {
				sd.Word = value.String
			}
		case stardict.FieldSw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sw", values[i])
			} else if value.Valid {
				sd.Sw = value.String
			}
		case stardict.FieldPhonetic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonetic", values[i])
			} else if value.Valid {
				sd.Phonetic = value.String
			}
		case stardict.FieldDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field definition", values[i])
			} else if value.Valid {
				sd.Definition = value.String
			}
		case stardict.FieldTranslation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field translation", values[i])
			} else if value.Valid {
				sd.Translation = value.String
			}
		case stardict.FieldPos:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pos", values[i])
			} else if value.Valid {
				sd.Pos = value.String
			}
		case stardict.FieldCollins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field collins", values[i])
			} else if value.Valid {
				sd.Collins = int(value.Int64)
			}
		case stardict.FieldOxford:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oxford", values[i])
			} else if value.Valid {
				sd.Oxford = int(value.Int64)
			}
		case stardict.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				sd.Tag = value.String
			}
		case stardict.FieldBnc:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bnc", values[i])
			} else if value.Valid {
				sd.Bnc = int(value.Int64)
			}
		case stardict.FieldFrq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frq", values[i])
			} else if value.Valid {
				sd.Frq = int(value.Int64)
			}
		case stardict.FieldExchange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange", values[i])
			} else if value.Valid {
				sd.Exchange = value.String
			}
		case stardict.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				sd.Detail = value.String
			}
		case stardict.FieldAudio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field audio", values[i])
			} else if value.Valid {
				sd.Audio = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StarDict.
// Note that you need to call StarDict.Unwrap() before calling this method if this StarDict
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *StarDict) Update() *StarDictUpdateOne {
	return (&StarDictClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the StarDict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *StarDict) Unwrap() *StarDict {
	tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: StarDict is not a transactional entity")
	}
	sd.config.driver = tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *StarDict) String() string {
	var builder strings.Builder
	builder.WriteString("StarDict(")
	builder.WriteString(fmt.Sprintf("id=%v", sd.ID))
	builder.WriteString(", word=")
	builder.WriteString(sd.Word)
	builder.WriteString(", sw=")
	builder.WriteString(sd.Sw)
	builder.WriteString(", phonetic=")
	builder.WriteString(sd.Phonetic)
	builder.WriteString(", definition=")
	builder.WriteString(sd.Definition)
	builder.WriteString(", translation=")
	builder.WriteString(sd.Translation)
	builder.WriteString(", pos=")
	builder.WriteString(sd.Pos)
	builder.WriteString(", collins=")
	builder.WriteString(fmt.Sprintf("%v", sd.Collins))
	builder.WriteString(", oxford=")
	builder.WriteString(fmt.Sprintf("%v", sd.Oxford))
	builder.WriteString(", tag=")
	builder.WriteString(sd.Tag)
	builder.WriteString(", bnc=")
	builder.WriteString(fmt.Sprintf("%v", sd.Bnc))
	builder.WriteString(", frq=")
	builder.WriteString(fmt.Sprintf("%v", sd.Frq))
	builder.WriteString(", exchange=")
	builder.WriteString(sd.Exchange)
	builder.WriteString(", detail=")
	builder.WriteString(sd.Detail)
	builder.WriteString(", audio=")
	builder.WriteString(sd.Audio)
	builder.WriteByte(')')
	return builder.String()
}

// StarDicts is a parsable slice of StarDict.
type StarDicts []*StarDict

func (sd StarDicts) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
