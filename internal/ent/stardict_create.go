// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegram-bot/internal/ent/stardict"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StarDictCreate is the builder for creating a StarDict entity.
type StarDictCreate struct {
	config
	mutation *StarDictMutation
	hooks    []Hook
}

// SetWord sets the "word" field.
func (sdc *StarDictCreate) SetWord(s string) *StarDictCreate {
	sdc.mutation.SetWord(s)
	return sdc
}

// SetSw sets the "sw" field.
func (sdc *StarDictCreate) SetSw(s string) *StarDictCreate {
	sdc.mutation.SetSw(s)
	return sdc
}

// SetPhonetic sets the "phonetic" field.
func (sdc *StarDictCreate) SetPhonetic(s string) *StarDictCreate {
	sdc.mutation.SetPhonetic(s)
	return sdc
}

// SetNillablePhonetic sets the "phonetic" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillablePhonetic(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetPhonetic(*s)
	}
	return sdc
}

// SetDefinition sets the "definition" field.
func (sdc *StarDictCreate) SetDefinition(s string) *StarDictCreate {
	sdc.mutation.SetDefinition(s)
	return sdc
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableDefinition(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetDefinition(*s)
	}
	return sdc
}

// SetTranslation sets the "translation" field.
func (sdc *StarDictCreate) SetTranslation(s string) *StarDictCreate {
	sdc.mutation.SetTranslation(s)
	return sdc
}

// SetNillableTranslation sets the "translation" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableTranslation(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetTranslation(*s)
	}
	return sdc
}

// SetPos sets the "pos" field.
func (sdc *StarDictCreate) SetPos(s string) *StarDictCreate {
	sdc.mutation.SetPos(s)
	return sdc
}

// SetNillablePos sets the "pos" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillablePos(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetPos(*s)
	}
	return sdc
}

// SetCollins sets the "collins" field.
func (sdc *StarDictCreate) SetCollins(i int) *StarDictCreate {
	sdc.mutation.SetCollins(i)
	return sdc
}

// SetNillableCollins sets the "collins" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableCollins(i *int) *StarDictCreate {
	if i != nil {
		sdc.SetCollins(*i)
	}
	return sdc
}

// SetOxford sets the "oxford" field.
func (sdc *StarDictCreate) SetOxford(i int) *StarDictCreate {
	sdc.mutation.SetOxford(i)
	return sdc
}

// SetNillableOxford sets the "oxford" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableOxford(i *int) *StarDictCreate {
	if i != nil {
		sdc.SetOxford(*i)
	}
	return sdc
}

// SetTag sets the "tag" field.
func (sdc *StarDictCreate) SetTag(s string) *StarDictCreate {
	sdc.mutation.SetTag(s)
	return sdc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableTag(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetTag(*s)
	}
	return sdc
}

// SetBnc sets the "bnc" field.
func (sdc *StarDictCreate) SetBnc(i int) *StarDictCreate {
	sdc.mutation.SetBnc(i)
	return sdc
}

// SetFrq sets the "frq" field.
func (sdc *StarDictCreate) SetFrq(i int) *StarDictCreate {
	sdc.mutation.SetFrq(i)
	return sdc
}

// SetExchange sets the "exchange" field.
func (sdc *StarDictCreate) SetExchange(s string) *StarDictCreate {
	sdc.mutation.SetExchange(s)
	return sdc
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableExchange(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetExchange(*s)
	}
	return sdc
}

// SetDetail sets the "detail" field.
func (sdc *StarDictCreate) SetDetail(s string) *StarDictCreate {
	sdc.mutation.SetDetail(s)
	return sdc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableDetail(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetDetail(*s)
	}
	return sdc
}

// SetAudio sets the "audio" field.
func (sdc *StarDictCreate) SetAudio(s string) *StarDictCreate {
	sdc.mutation.SetAudio(s)
	return sdc
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (sdc *StarDictCreate) SetNillableAudio(s *string) *StarDictCreate {
	if s != nil {
		sdc.SetAudio(*s)
	}
	return sdc
}

// Mutation returns the StarDictMutation object of the builder.
func (sdc *StarDictCreate) Mutation() *StarDictMutation {
	return sdc.mutation
}

// Save creates the StarDict in the database.
func (sdc *StarDictCreate) Save(ctx context.Context) (*StarDict, error) {
	var (
		err  error
		node *StarDict
	)
	sdc.defaults()
	if len(sdc.hooks) == 0 {
		if err = sdc.check(); err != nil {
			return nil, err
		}
		node, err = sdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StarDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sdc.check(); err != nil {
				return nil, err
			}
			sdc.mutation = mutation
			if node, err = sdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sdc.hooks) - 1; i >= 0; i-- {
			if sdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *StarDictCreate) SaveX(ctx context.Context) *StarDict {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *StarDictCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *StarDictCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *StarDictCreate) defaults() {
	if _, ok := sdc.mutation.Phonetic(); !ok {
		v := stardict.DefaultPhonetic
		sdc.mutation.SetPhonetic(v)
	}
	if _, ok := sdc.mutation.Definition(); !ok {
		v := stardict.DefaultDefinition
		sdc.mutation.SetDefinition(v)
	}
	if _, ok := sdc.mutation.Translation(); !ok {
		v := stardict.DefaultTranslation
		sdc.mutation.SetTranslation(v)
	}
	if _, ok := sdc.mutation.Pos(); !ok {
		v := stardict.DefaultPos
		sdc.mutation.SetPos(v)
	}
	if _, ok := sdc.mutation.Collins(); !ok {
		v := stardict.DefaultCollins
		sdc.mutation.SetCollins(v)
	}
	if _, ok := sdc.mutation.Oxford(); !ok {
		v := stardict.DefaultOxford
		sdc.mutation.SetOxford(v)
	}
	if _, ok := sdc.mutation.Tag(); !ok {
		v := stardict.DefaultTag
		sdc.mutation.SetTag(v)
	}
	if _, ok := sdc.mutation.Exchange(); !ok {
		v := stardict.DefaultExchange
		sdc.mutation.SetExchange(v)
	}
	if _, ok := sdc.mutation.Detail(); !ok {
		v := stardict.DefaultDetail
		sdc.mutation.SetDetail(v)
	}
	if _, ok := sdc.mutation.Audio(); !ok {
		v := stardict.DefaultAudio
		sdc.mutation.SetAudio(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *StarDictCreate) check() error {
	if _, ok := sdc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "StarDict.word"`)}
	}
	if v, ok := sdc.mutation.Word(); ok {
		if err := stardict.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "StarDict.word": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.Sw(); !ok {
		return &ValidationError{Name: "sw", err: errors.New(`ent: missing required field "StarDict.sw"`)}
	}
	if v, ok := sdc.mutation.Sw(); ok {
		if err := stardict.SwValidator(v); err != nil {
			return &ValidationError{Name: "sw", err: fmt.Errorf(`ent: validator failed for field "StarDict.sw": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.Phonetic(); !ok {
		return &ValidationError{Name: "phonetic", err: errors.New(`ent: missing required field "StarDict.phonetic"`)}
	}
	if _, ok := sdc.mutation.Definition(); !ok {
		return &ValidationError{Name: "definition", err: errors.New(`ent: missing required field "StarDict.definition"`)}
	}
	if _, ok := sdc.mutation.Translation(); !ok {
		return &ValidationError{Name: "translation", err: errors.New(`ent: missing required field "StarDict.translation"`)}
	}
	if _, ok := sdc.mutation.Pos(); !ok {
		return &ValidationError{Name: "pos", err: errors.New(`ent: missing required field "StarDict.pos"`)}
	}
	if _, ok := sdc.mutation.Collins(); !ok {
		return &ValidationError{Name: "collins", err: errors.New(`ent: missing required field "StarDict.collins"`)}
	}
	if _, ok := sdc.mutation.Oxford(); !ok {
		return &ValidationError{Name: "oxford", err: errors.New(`ent: missing required field "StarDict.oxford"`)}
	}
	if _, ok := sdc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "StarDict.tag"`)}
	}
	if _, ok := sdc.mutation.Bnc(); !ok {
		return &ValidationError{Name: "bnc", err: errors.New(`ent: missing required field "StarDict.bnc"`)}
	}
	if _, ok := sdc.mutation.Frq(); !ok {
		return &ValidationError{Name: "frq", err: errors.New(`ent: missing required field "StarDict.frq"`)}
	}
	if _, ok := sdc.mutation.Exchange(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New(`ent: missing required field "StarDict.exchange"`)}
	}
	if _, ok := sdc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "StarDict.detail"`)}
	}
	if _, ok := sdc.mutation.Audio(); !ok {
		return &ValidationError{Name: "audio", err: errors.New(`ent: missing required field "StarDict.audio"`)}
	}
	return nil
}

func (sdc *StarDictCreate) sqlSave(ctx context.Context) (*StarDict, error) {
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sdc *StarDictCreate) createSpec() (*StarDict, *sqlgraph.CreateSpec) {
	var (
		_node = &StarDict{config: sdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stardict.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stardict.FieldID,
			},
		}
	)
	if value, ok := sdc.mutation.Word(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldWord,
		})
		_node.Word = value
	}
	if value, ok := sdc.mutation.Sw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldSw,
		})
		_node.Sw = value
	}
	if value, ok := sdc.mutation.Phonetic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPhonetic,
		})
		_node.Phonetic = value
	}
	if value, ok := sdc.mutation.Definition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDefinition,
		})
		_node.Definition = value
	}
	if value, ok := sdc.mutation.Translation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTranslation,
		})
		_node.Translation = value
	}
	if value, ok := sdc.mutation.Pos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPos,
		})
		_node.Pos = value
	}
	if value, ok := sdc.mutation.Collins(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldCollins,
		})
		_node.Collins = value
	}
	if value, ok := sdc.mutation.Oxford(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldOxford,
		})
		_node.Oxford = value
	}
	if value, ok := sdc.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := sdc.mutation.Bnc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldBnc,
		})
		_node.Bnc = value
	}
	if value, ok := sdc.mutation.Frq(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldFrq,
		})
		_node.Frq = value
	}
	if value, ok := sdc.mutation.Exchange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldExchange,
		})
		_node.Exchange = value
	}
	if value, ok := sdc.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := sdc.mutation.Audio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldAudio,
		})
		_node.Audio = value
	}
	return _node, _spec
}

// StarDictCreateBulk is the builder for creating many StarDict entities in bulk.
type StarDictCreateBulk struct {
	config
	builders []*StarDictCreate
}

// Save creates the StarDict entities in the database.
func (sdcb *StarDictCreateBulk) Save(ctx context.Context) ([]*StarDict, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*StarDict, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StarDictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *StarDictCreateBulk) SaveX(ctx context.Context) []*StarDict {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *StarDictCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *StarDictCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
