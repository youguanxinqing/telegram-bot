// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegram-bot/internal/ent/words"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordsCreate is the builder for creating a Words entity.
type WordsCreate struct {
	config
	mutation *WordsMutation
	hooks    []Hook
}

// SetWord sets the "word" field.
func (wc *WordsCreate) SetWord(s string) *WordsCreate {
	wc.mutation.SetWord(s)
	return wc
}

// SetExplain sets the "explain" field.
func (wc *WordsCreate) SetExplain(s string) *WordsCreate {
	wc.mutation.SetExplain(s)
	return wc
}

// SetNillableExplain sets the "explain" field if the given value is not nil.
func (wc *WordsCreate) SetNillableExplain(s *string) *WordsCreate {
	if s != nil {
		wc.SetExplain(*s)
	}
	return wc
}

// SetPhonetic sets the "phonetic" field.
func (wc *WordsCreate) SetPhonetic(s string) *WordsCreate {
	wc.mutation.SetPhonetic(s)
	return wc
}

// SetNillablePhonetic sets the "phonetic" field if the given value is not nil.
func (wc *WordsCreate) SetNillablePhonetic(s *string) *WordsCreate {
	if s != nil {
		wc.SetPhonetic(*s)
	}
	return wc
}

// SetFrequency sets the "frequency" field.
func (wc *WordsCreate) SetFrequency(i int) *WordsCreate {
	wc.mutation.SetFrequency(i)
	return wc
}

// SetNillableFrequency sets the "frequency" field if the given value is not nil.
func (wc *WordsCreate) SetNillableFrequency(i *int) *WordsCreate {
	if i != nil {
		wc.SetFrequency(*i)
	}
	return wc
}

// SetLastShowTime sets the "last_show_time" field.
func (wc *WordsCreate) SetLastShowTime(t time.Time) *WordsCreate {
	wc.mutation.SetLastShowTime(t)
	return wc
}

// SetNillableLastShowTime sets the "last_show_time" field if the given value is not nil.
func (wc *WordsCreate) SetNillableLastShowTime(t *time.Time) *WordsCreate {
	if t != nil {
		wc.SetLastShowTime(*t)
	}
	return wc
}

// SetIsHide sets the "is_hide" field.
func (wc *WordsCreate) SetIsHide(b bool) *WordsCreate {
	wc.mutation.SetIsHide(b)
	return wc
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (wc *WordsCreate) SetNillableIsHide(b *bool) *WordsCreate {
	if b != nil {
		wc.SetIsHide(*b)
	}
	return wc
}

// SetCreateTime sets the "create_time" field.
func (wc *WordsCreate) SetCreateTime(t time.Time) *WordsCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WordsCreate) SetNillableCreateTime(t *time.Time) *WordsCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetDeleteTime sets the "delete_time" field.
func (wc *WordsCreate) SetDeleteTime(t time.Time) *WordsCreate {
	wc.mutation.SetDeleteTime(t)
	return wc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (wc *WordsCreate) SetNillableDeleteTime(t *time.Time) *WordsCreate {
	if t != nil {
		wc.SetDeleteTime(*t)
	}
	return wc
}

// SetIsDelete sets the "is_delete" field.
func (wc *WordsCreate) SetIsDelete(b bool) *WordsCreate {
	wc.mutation.SetIsDelete(b)
	return wc
}

// SetNillableIsDelete sets the "is_delete" field if the given value is not nil.
func (wc *WordsCreate) SetNillableIsDelete(b *bool) *WordsCreate {
	if b != nil {
		wc.SetIsDelete(*b)
	}
	return wc
}

// Mutation returns the WordsMutation object of the builder.
func (wc *WordsCreate) Mutation() *WordsMutation {
	return wc.mutation
}

// Save creates the Words in the database.
func (wc *WordsCreate) Save(ctx context.Context) (*Words, error) {
	var (
		err  error
		node *Words
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WordsCreate) SaveX(ctx context.Context) *Words {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WordsCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WordsCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WordsCreate) defaults() {
	if _, ok := wc.mutation.Explain(); !ok {
		v := words.DefaultExplain
		wc.mutation.SetExplain(v)
	}
	if _, ok := wc.mutation.Phonetic(); !ok {
		v := words.DefaultPhonetic
		wc.mutation.SetPhonetic(v)
	}
	if _, ok := wc.mutation.Frequency(); !ok {
		v := words.DefaultFrequency
		wc.mutation.SetFrequency(v)
	}
	if _, ok := wc.mutation.LastShowTime(); !ok {
		v := words.DefaultLastShowTime()
		wc.mutation.SetLastShowTime(v)
	}
	if _, ok := wc.mutation.IsHide(); !ok {
		v := words.DefaultIsHide
		wc.mutation.SetIsHide(v)
	}
	if _, ok := wc.mutation.CreateTime(); !ok {
		v := words.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.DeleteTime(); !ok {
		v := words.DefaultDeleteTime()
		wc.mutation.SetDeleteTime(v)
	}
	if _, ok := wc.mutation.IsDelete(); !ok {
		v := words.DefaultIsDelete
		wc.mutation.SetIsDelete(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WordsCreate) check() error {
	if _, ok := wc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "Words.word"`)}
	}
	if v, ok := wc.mutation.Word(); ok {
		if err := words.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "Words.word": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Explain(); !ok {
		return &ValidationError{Name: "explain", err: errors.New(`ent: missing required field "Words.explain"`)}
	}
	if _, ok := wc.mutation.Phonetic(); !ok {
		return &ValidationError{Name: "phonetic", err: errors.New(`ent: missing required field "Words.phonetic"`)}
	}
	if _, ok := wc.mutation.Frequency(); !ok {
		return &ValidationError{Name: "frequency", err: errors.New(`ent: missing required field "Words.frequency"`)}
	}
	if v, ok := wc.mutation.Frequency(); ok {
		if err := words.FrequencyValidator(v); err != nil {
			return &ValidationError{Name: "frequency", err: fmt.Errorf(`ent: validator failed for field "Words.frequency": %w`, err)}
		}
	}
	if _, ok := wc.mutation.LastShowTime(); !ok {
		return &ValidationError{Name: "last_show_time", err: errors.New(`ent: missing required field "Words.last_show_time"`)}
	}
	if _, ok := wc.mutation.IsHide(); !ok {
		return &ValidationError{Name: "is_hide", err: errors.New(`ent: missing required field "Words.is_hide"`)}
	}
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Words.create_time"`)}
	}
	if _, ok := wc.mutation.DeleteTime(); !ok {
		return &ValidationError{Name: "delete_time", err: errors.New(`ent: missing required field "Words.delete_time"`)}
	}
	if _, ok := wc.mutation.IsDelete(); !ok {
		return &ValidationError{Name: "is_delete", err: errors.New(`ent: missing required field "Words.is_delete"`)}
	}
	return nil
}

func (wc *WordsCreate) sqlSave(ctx context.Context) (*Words, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WordsCreate) createSpec() (*Words, *sqlgraph.CreateSpec) {
	var (
		_node = &Words{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: words.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: words.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.Word(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: words.FieldWord,
		})
		_node.Word = value
	}
	if value, ok := wc.mutation.Explain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: words.FieldExplain,
		})
		_node.Explain = value
	}
	if value, ok := wc.mutation.Phonetic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: words.FieldPhonetic,
		})
		_node.Phonetic = value
	}
	if value, ok := wc.mutation.Frequency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: words.FieldFrequency,
		})
		_node.Frequency = value
	}
	if value, ok := wc.mutation.LastShowTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: words.FieldLastShowTime,
		})
		_node.LastShowTime = value
	}
	if value, ok := wc.mutation.IsHide(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: words.FieldIsHide,
		})
		_node.IsHide = value
	}
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: words.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := wc.mutation.DeleteTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: words.FieldDeleteTime,
		})
		_node.DeleteTime = value
	}
	if value, ok := wc.mutation.IsDelete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: words.FieldIsDelete,
		})
		_node.IsDelete = value
	}
	return _node, _spec
}

// WordsCreateBulk is the builder for creating many Words entities in bulk.
type WordsCreateBulk struct {
	config
	builders []*WordsCreate
}

// Save creates the Words entities in the database.
func (wcb *WordsCreateBulk) Save(ctx context.Context) ([]*Words, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Words, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WordsCreateBulk) SaveX(ctx context.Context) []*Words {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WordsCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WordsCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
