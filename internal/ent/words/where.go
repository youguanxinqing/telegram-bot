// Code generated by entc, DO NOT EDIT.

package words

import (
	"telegram-bot/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord), v))
	})
}

// Explain applies equality check predicate on the "explain" field. It's identical to ExplainEQ.
func Explain(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExplain), v))
	})
}

// Phonetic applies equality check predicate on the "phonetic" field. It's identical to PhoneticEQ.
func Phonetic(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonetic), v))
	})
}

// Frequency applies equality check predicate on the "frequency" field. It's identical to FrequencyEQ.
func Frequency(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrequency), v))
	})
}

// LastShowTime applies equality check predicate on the "last_show_time" field. It's identical to LastShowTimeEQ.
func LastShowTime(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastShowTime), v))
	})
}

// IsHide applies equality check predicate on the "is_hide" field. It's identical to IsHideEQ.
func IsHide(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHide), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// IsDelete applies equality check predicate on the "is_delete" field. It's identical to IsDeleteEQ.
func IsDelete(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord), v))
	})
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord), v))
	})
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord), v...))
	})
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord), v...))
	})
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord), v))
	})
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord), v))
	})
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord), v))
	})
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord), v))
	})
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord), v))
	})
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord), v))
	})
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord), v))
	})
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord), v))
	})
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord), v))
	})
}

// ExplainEQ applies the EQ predicate on the "explain" field.
func ExplainEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExplain), v))
	})
}

// ExplainNEQ applies the NEQ predicate on the "explain" field.
func ExplainNEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExplain), v))
	})
}

// ExplainIn applies the In predicate on the "explain" field.
func ExplainIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExplain), v...))
	})
}

// ExplainNotIn applies the NotIn predicate on the "explain" field.
func ExplainNotIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExplain), v...))
	})
}

// ExplainGT applies the GT predicate on the "explain" field.
func ExplainGT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExplain), v))
	})
}

// ExplainGTE applies the GTE predicate on the "explain" field.
func ExplainGTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExplain), v))
	})
}

// ExplainLT applies the LT predicate on the "explain" field.
func ExplainLT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExplain), v))
	})
}

// ExplainLTE applies the LTE predicate on the "explain" field.
func ExplainLTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExplain), v))
	})
}

// ExplainContains applies the Contains predicate on the "explain" field.
func ExplainContains(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExplain), v))
	})
}

// ExplainHasPrefix applies the HasPrefix predicate on the "explain" field.
func ExplainHasPrefix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExplain), v))
	})
}

// ExplainHasSuffix applies the HasSuffix predicate on the "explain" field.
func ExplainHasSuffix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExplain), v))
	})
}

// ExplainEqualFold applies the EqualFold predicate on the "explain" field.
func ExplainEqualFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExplain), v))
	})
}

// ExplainContainsFold applies the ContainsFold predicate on the "explain" field.
func ExplainContainsFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExplain), v))
	})
}

// PhoneticEQ applies the EQ predicate on the "phonetic" field.
func PhoneticEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonetic), v))
	})
}

// PhoneticNEQ applies the NEQ predicate on the "phonetic" field.
func PhoneticNEQ(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhonetic), v))
	})
}

// PhoneticIn applies the In predicate on the "phonetic" field.
func PhoneticIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhonetic), v...))
	})
}

// PhoneticNotIn applies the NotIn predicate on the "phonetic" field.
func PhoneticNotIn(vs ...string) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhonetic), v...))
	})
}

// PhoneticGT applies the GT predicate on the "phonetic" field.
func PhoneticGT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhonetic), v))
	})
}

// PhoneticGTE applies the GTE predicate on the "phonetic" field.
func PhoneticGTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhonetic), v))
	})
}

// PhoneticLT applies the LT predicate on the "phonetic" field.
func PhoneticLT(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhonetic), v))
	})
}

// PhoneticLTE applies the LTE predicate on the "phonetic" field.
func PhoneticLTE(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhonetic), v))
	})
}

// PhoneticContains applies the Contains predicate on the "phonetic" field.
func PhoneticContains(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhonetic), v))
	})
}

// PhoneticHasPrefix applies the HasPrefix predicate on the "phonetic" field.
func PhoneticHasPrefix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhonetic), v))
	})
}

// PhoneticHasSuffix applies the HasSuffix predicate on the "phonetic" field.
func PhoneticHasSuffix(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhonetic), v))
	})
}

// PhoneticEqualFold applies the EqualFold predicate on the "phonetic" field.
func PhoneticEqualFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhonetic), v))
	})
}

// PhoneticContainsFold applies the ContainsFold predicate on the "phonetic" field.
func PhoneticContainsFold(v string) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhonetic), v))
	})
}

// FrequencyEQ applies the EQ predicate on the "frequency" field.
func FrequencyEQ(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrequency), v))
	})
}

// FrequencyNEQ applies the NEQ predicate on the "frequency" field.
func FrequencyNEQ(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrequency), v))
	})
}

// FrequencyIn applies the In predicate on the "frequency" field.
func FrequencyIn(vs ...int) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrequency), v...))
	})
}

// FrequencyNotIn applies the NotIn predicate on the "frequency" field.
func FrequencyNotIn(vs ...int) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrequency), v...))
	})
}

// FrequencyGT applies the GT predicate on the "frequency" field.
func FrequencyGT(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrequency), v))
	})
}

// FrequencyGTE applies the GTE predicate on the "frequency" field.
func FrequencyGTE(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrequency), v))
	})
}

// FrequencyLT applies the LT predicate on the "frequency" field.
func FrequencyLT(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrequency), v))
	})
}

// FrequencyLTE applies the LTE predicate on the "frequency" field.
func FrequencyLTE(v int) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrequency), v))
	})
}

// LastShowTimeEQ applies the EQ predicate on the "last_show_time" field.
func LastShowTimeEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastShowTime), v))
	})
}

// LastShowTimeNEQ applies the NEQ predicate on the "last_show_time" field.
func LastShowTimeNEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastShowTime), v))
	})
}

// LastShowTimeIn applies the In predicate on the "last_show_time" field.
func LastShowTimeIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastShowTime), v...))
	})
}

// LastShowTimeNotIn applies the NotIn predicate on the "last_show_time" field.
func LastShowTimeNotIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastShowTime), v...))
	})
}

// LastShowTimeGT applies the GT predicate on the "last_show_time" field.
func LastShowTimeGT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastShowTime), v))
	})
}

// LastShowTimeGTE applies the GTE predicate on the "last_show_time" field.
func LastShowTimeGTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastShowTime), v))
	})
}

// LastShowTimeLT applies the LT predicate on the "last_show_time" field.
func LastShowTimeLT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastShowTime), v))
	})
}

// LastShowTimeLTE applies the LTE predicate on the "last_show_time" field.
func LastShowTimeLTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastShowTime), v))
	})
}

// IsHideEQ applies the EQ predicate on the "is_hide" field.
func IsHideEQ(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHide), v))
	})
}

// IsHideNEQ applies the NEQ predicate on the "is_hide" field.
func IsHideNEQ(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHide), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Words {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Words(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// IsDeleteEQ applies the EQ predicate on the "is_delete" field.
func IsDeleteEQ(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// IsDeleteNEQ applies the NEQ predicate on the "is_delete" field.
func IsDeleteNEQ(v bool) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDelete), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Words) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Words) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Words) predicate.Words {
	return predicate.Words(func(s *sql.Selector) {
		p(s.Not())
	})
}
