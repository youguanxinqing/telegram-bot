// Code generated by entc, DO NOT EDIT.

package stardict

import (
	"telegram-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord), v))
	})
}

// Sw applies equality check predicate on the "sw" field. It's identical to SwEQ.
func Sw(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSw), v))
	})
}

// Phonetic applies equality check predicate on the "phonetic" field. It's identical to PhoneticEQ.
func Phonetic(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonetic), v))
	})
}

// Definition applies equality check predicate on the "definition" field. It's identical to DefinitionEQ.
func Definition(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefinition), v))
	})
}

// Translation applies equality check predicate on the "translation" field. It's identical to TranslationEQ.
func Translation(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranslation), v))
	})
}

// Pos applies equality check predicate on the "pos" field. It's identical to PosEQ.
func Pos(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPos), v))
	})
}

// Collins applies equality check predicate on the "collins" field. It's identical to CollinsEQ.
func Collins(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollins), v))
	})
}

// Oxford applies equality check predicate on the "oxford" field. It's identical to OxfordEQ.
func Oxford(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOxford), v))
	})
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTag), v))
	})
}

// Bnc applies equality check predicate on the "bnc" field. It's identical to BncEQ.
func Bnc(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBnc), v))
	})
}

// Frq applies equality check predicate on the "frq" field. It's identical to FrqEQ.
func Frq(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrq), v))
	})
}

// Exchange applies equality check predicate on the "exchange" field. It's identical to ExchangeEQ.
func Exchange(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchange), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// Audio applies equality check predicate on the "audio" field. It's identical to AudioEQ.
func Audio(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudio), v))
	})
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWord), v))
	})
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWord), v))
	})
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWord), v...))
	})
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWord), v...))
	})
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWord), v))
	})
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWord), v))
	})
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWord), v))
	})
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWord), v))
	})
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWord), v))
	})
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWord), v))
	})
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWord), v))
	})
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWord), v))
	})
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWord), v))
	})
}

// SwEQ applies the EQ predicate on the "sw" field.
func SwEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSw), v))
	})
}

// SwNEQ applies the NEQ predicate on the "sw" field.
func SwNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSw), v))
	})
}

// SwIn applies the In predicate on the "sw" field.
func SwIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSw), v...))
	})
}

// SwNotIn applies the NotIn predicate on the "sw" field.
func SwNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSw), v...))
	})
}

// SwGT applies the GT predicate on the "sw" field.
func SwGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSw), v))
	})
}

// SwGTE applies the GTE predicate on the "sw" field.
func SwGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSw), v))
	})
}

// SwLT applies the LT predicate on the "sw" field.
func SwLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSw), v))
	})
}

// SwLTE applies the LTE predicate on the "sw" field.
func SwLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSw), v))
	})
}

// SwContains applies the Contains predicate on the "sw" field.
func SwContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSw), v))
	})
}

// SwHasPrefix applies the HasPrefix predicate on the "sw" field.
func SwHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSw), v))
	})
}

// SwHasSuffix applies the HasSuffix predicate on the "sw" field.
func SwHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSw), v))
	})
}

// SwEqualFold applies the EqualFold predicate on the "sw" field.
func SwEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSw), v))
	})
}

// SwContainsFold applies the ContainsFold predicate on the "sw" field.
func SwContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSw), v))
	})
}

// PhoneticEQ applies the EQ predicate on the "phonetic" field.
func PhoneticEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhonetic), v))
	})
}

// PhoneticNEQ applies the NEQ predicate on the "phonetic" field.
func PhoneticNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhonetic), v))
	})
}

// PhoneticIn applies the In predicate on the "phonetic" field.
func PhoneticIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhonetic), v...))
	})
}

// PhoneticNotIn applies the NotIn predicate on the "phonetic" field.
func PhoneticNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhonetic), v...))
	})
}

// PhoneticGT applies the GT predicate on the "phonetic" field.
func PhoneticGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhonetic), v))
	})
}

// PhoneticGTE applies the GTE predicate on the "phonetic" field.
func PhoneticGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhonetic), v))
	})
}

// PhoneticLT applies the LT predicate on the "phonetic" field.
func PhoneticLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhonetic), v))
	})
}

// PhoneticLTE applies the LTE predicate on the "phonetic" field.
func PhoneticLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhonetic), v))
	})
}

// PhoneticContains applies the Contains predicate on the "phonetic" field.
func PhoneticContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhonetic), v))
	})
}

// PhoneticHasPrefix applies the HasPrefix predicate on the "phonetic" field.
func PhoneticHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhonetic), v))
	})
}

// PhoneticHasSuffix applies the HasSuffix predicate on the "phonetic" field.
func PhoneticHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhonetic), v))
	})
}

// PhoneticEqualFold applies the EqualFold predicate on the "phonetic" field.
func PhoneticEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhonetic), v))
	})
}

// PhoneticContainsFold applies the ContainsFold predicate on the "phonetic" field.
func PhoneticContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhonetic), v))
	})
}

// DefinitionEQ applies the EQ predicate on the "definition" field.
func DefinitionEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefinition), v))
	})
}

// DefinitionNEQ applies the NEQ predicate on the "definition" field.
func DefinitionNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefinition), v))
	})
}

// DefinitionIn applies the In predicate on the "definition" field.
func DefinitionIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefinition), v...))
	})
}

// DefinitionNotIn applies the NotIn predicate on the "definition" field.
func DefinitionNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefinition), v...))
	})
}

// DefinitionGT applies the GT predicate on the "definition" field.
func DefinitionGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefinition), v))
	})
}

// DefinitionGTE applies the GTE predicate on the "definition" field.
func DefinitionGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefinition), v))
	})
}

// DefinitionLT applies the LT predicate on the "definition" field.
func DefinitionLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefinition), v))
	})
}

// DefinitionLTE applies the LTE predicate on the "definition" field.
func DefinitionLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefinition), v))
	})
}

// DefinitionContains applies the Contains predicate on the "definition" field.
func DefinitionContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefinition), v))
	})
}

// DefinitionHasPrefix applies the HasPrefix predicate on the "definition" field.
func DefinitionHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefinition), v))
	})
}

// DefinitionHasSuffix applies the HasSuffix predicate on the "definition" field.
func DefinitionHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefinition), v))
	})
}

// DefinitionEqualFold applies the EqualFold predicate on the "definition" field.
func DefinitionEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefinition), v))
	})
}

// DefinitionContainsFold applies the ContainsFold predicate on the "definition" field.
func DefinitionContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefinition), v))
	})
}

// TranslationEQ applies the EQ predicate on the "translation" field.
func TranslationEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranslation), v))
	})
}

// TranslationNEQ applies the NEQ predicate on the "translation" field.
func TranslationNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranslation), v))
	})
}

// TranslationIn applies the In predicate on the "translation" field.
func TranslationIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTranslation), v...))
	})
}

// TranslationNotIn applies the NotIn predicate on the "translation" field.
func TranslationNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTranslation), v...))
	})
}

// TranslationGT applies the GT predicate on the "translation" field.
func TranslationGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranslation), v))
	})
}

// TranslationGTE applies the GTE predicate on the "translation" field.
func TranslationGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranslation), v))
	})
}

// TranslationLT applies the LT predicate on the "translation" field.
func TranslationLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranslation), v))
	})
}

// TranslationLTE applies the LTE predicate on the "translation" field.
func TranslationLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranslation), v))
	})
}

// TranslationContains applies the Contains predicate on the "translation" field.
func TranslationContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranslation), v))
	})
}

// TranslationHasPrefix applies the HasPrefix predicate on the "translation" field.
func TranslationHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranslation), v))
	})
}

// TranslationHasSuffix applies the HasSuffix predicate on the "translation" field.
func TranslationHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranslation), v))
	})
}

// TranslationEqualFold applies the EqualFold predicate on the "translation" field.
func TranslationEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranslation), v))
	})
}

// TranslationContainsFold applies the ContainsFold predicate on the "translation" field.
func TranslationContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranslation), v))
	})
}

// PosEQ applies the EQ predicate on the "pos" field.
func PosEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPos), v))
	})
}

// PosNEQ applies the NEQ predicate on the "pos" field.
func PosNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPos), v))
	})
}

// PosIn applies the In predicate on the "pos" field.
func PosIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPos), v...))
	})
}

// PosNotIn applies the NotIn predicate on the "pos" field.
func PosNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPos), v...))
	})
}

// PosGT applies the GT predicate on the "pos" field.
func PosGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPos), v))
	})
}

// PosGTE applies the GTE predicate on the "pos" field.
func PosGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPos), v))
	})
}

// PosLT applies the LT predicate on the "pos" field.
func PosLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPos), v))
	})
}

// PosLTE applies the LTE predicate on the "pos" field.
func PosLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPos), v))
	})
}

// PosContains applies the Contains predicate on the "pos" field.
func PosContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPos), v))
	})
}

// PosHasPrefix applies the HasPrefix predicate on the "pos" field.
func PosHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPos), v))
	})
}

// PosHasSuffix applies the HasSuffix predicate on the "pos" field.
func PosHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPos), v))
	})
}

// PosEqualFold applies the EqualFold predicate on the "pos" field.
func PosEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPos), v))
	})
}

// PosContainsFold applies the ContainsFold predicate on the "pos" field.
func PosContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPos), v))
	})
}

// CollinsEQ applies the EQ predicate on the "collins" field.
func CollinsEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollins), v))
	})
}

// CollinsNEQ applies the NEQ predicate on the "collins" field.
func CollinsNEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollins), v))
	})
}

// CollinsIn applies the In predicate on the "collins" field.
func CollinsIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollins), v...))
	})
}

// CollinsNotIn applies the NotIn predicate on the "collins" field.
func CollinsNotIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollins), v...))
	})
}

// CollinsGT applies the GT predicate on the "collins" field.
func CollinsGT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollins), v))
	})
}

// CollinsGTE applies the GTE predicate on the "collins" field.
func CollinsGTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollins), v))
	})
}

// CollinsLT applies the LT predicate on the "collins" field.
func CollinsLT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollins), v))
	})
}

// CollinsLTE applies the LTE predicate on the "collins" field.
func CollinsLTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollins), v))
	})
}

// OxfordEQ applies the EQ predicate on the "oxford" field.
func OxfordEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOxford), v))
	})
}

// OxfordNEQ applies the NEQ predicate on the "oxford" field.
func OxfordNEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOxford), v))
	})
}

// OxfordIn applies the In predicate on the "oxford" field.
func OxfordIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOxford), v...))
	})
}

// OxfordNotIn applies the NotIn predicate on the "oxford" field.
func OxfordNotIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOxford), v...))
	})
}

// OxfordGT applies the GT predicate on the "oxford" field.
func OxfordGT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOxford), v))
	})
}

// OxfordGTE applies the GTE predicate on the "oxford" field.
func OxfordGTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOxford), v))
	})
}

// OxfordLT applies the LT predicate on the "oxford" field.
func OxfordLT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOxford), v))
	})
}

// OxfordLTE applies the LTE predicate on the "oxford" field.
func OxfordLTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOxford), v))
	})
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTag), v))
	})
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTag), v))
	})
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTag), v...))
	})
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTag), v...))
	})
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTag), v))
	})
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTag), v))
	})
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTag), v))
	})
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTag), v))
	})
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTag), v))
	})
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTag), v))
	})
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTag), v))
	})
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTag), v))
	})
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTag), v))
	})
}

// BncEQ applies the EQ predicate on the "bnc" field.
func BncEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBnc), v))
	})
}

// BncNEQ applies the NEQ predicate on the "bnc" field.
func BncNEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBnc), v))
	})
}

// BncIn applies the In predicate on the "bnc" field.
func BncIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBnc), v...))
	})
}

// BncNotIn applies the NotIn predicate on the "bnc" field.
func BncNotIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBnc), v...))
	})
}

// BncGT applies the GT predicate on the "bnc" field.
func BncGT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBnc), v))
	})
}

// BncGTE applies the GTE predicate on the "bnc" field.
func BncGTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBnc), v))
	})
}

// BncLT applies the LT predicate on the "bnc" field.
func BncLT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBnc), v))
	})
}

// BncLTE applies the LTE predicate on the "bnc" field.
func BncLTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBnc), v))
	})
}

// FrqEQ applies the EQ predicate on the "frq" field.
func FrqEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrq), v))
	})
}

// FrqNEQ applies the NEQ predicate on the "frq" field.
func FrqNEQ(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrq), v))
	})
}

// FrqIn applies the In predicate on the "frq" field.
func FrqIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrq), v...))
	})
}

// FrqNotIn applies the NotIn predicate on the "frq" field.
func FrqNotIn(vs ...int) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrq), v...))
	})
}

// FrqGT applies the GT predicate on the "frq" field.
func FrqGT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrq), v))
	})
}

// FrqGTE applies the GTE predicate on the "frq" field.
func FrqGTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrq), v))
	})
}

// FrqLT applies the LT predicate on the "frq" field.
func FrqLT(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrq), v))
	})
}

// FrqLTE applies the LTE predicate on the "frq" field.
func FrqLTE(v int) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrq), v))
	})
}

// ExchangeEQ applies the EQ predicate on the "exchange" field.
func ExchangeEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchange), v))
	})
}

// ExchangeNEQ applies the NEQ predicate on the "exchange" field.
func ExchangeNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExchange), v))
	})
}

// ExchangeIn applies the In predicate on the "exchange" field.
func ExchangeIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExchange), v...))
	})
}

// ExchangeNotIn applies the NotIn predicate on the "exchange" field.
func ExchangeNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExchange), v...))
	})
}

// ExchangeGT applies the GT predicate on the "exchange" field.
func ExchangeGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExchange), v))
	})
}

// ExchangeGTE applies the GTE predicate on the "exchange" field.
func ExchangeGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExchange), v))
	})
}

// ExchangeLT applies the LT predicate on the "exchange" field.
func ExchangeLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExchange), v))
	})
}

// ExchangeLTE applies the LTE predicate on the "exchange" field.
func ExchangeLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExchange), v))
	})
}

// ExchangeContains applies the Contains predicate on the "exchange" field.
func ExchangeContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExchange), v))
	})
}

// ExchangeHasPrefix applies the HasPrefix predicate on the "exchange" field.
func ExchangeHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExchange), v))
	})
}

// ExchangeHasSuffix applies the HasSuffix predicate on the "exchange" field.
func ExchangeHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExchange), v))
	})
}

// ExchangeEqualFold applies the EqualFold predicate on the "exchange" field.
func ExchangeEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExchange), v))
	})
}

// ExchangeContainsFold applies the ContainsFold predicate on the "exchange" field.
func ExchangeContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExchange), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// AudioEQ applies the EQ predicate on the "audio" field.
func AudioEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudio), v))
	})
}

// AudioNEQ applies the NEQ predicate on the "audio" field.
func AudioNEQ(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAudio), v))
	})
}

// AudioIn applies the In predicate on the "audio" field.
func AudioIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAudio), v...))
	})
}

// AudioNotIn applies the NotIn predicate on the "audio" field.
func AudioNotIn(vs ...string) predicate.StarDict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.StarDict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAudio), v...))
	})
}

// AudioGT applies the GT predicate on the "audio" field.
func AudioGT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAudio), v))
	})
}

// AudioGTE applies the GTE predicate on the "audio" field.
func AudioGTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAudio), v))
	})
}

// AudioLT applies the LT predicate on the "audio" field.
func AudioLT(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAudio), v))
	})
}

// AudioLTE applies the LTE predicate on the "audio" field.
func AudioLTE(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAudio), v))
	})
}

// AudioContains applies the Contains predicate on the "audio" field.
func AudioContains(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAudio), v))
	})
}

// AudioHasPrefix applies the HasPrefix predicate on the "audio" field.
func AudioHasPrefix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAudio), v))
	})
}

// AudioHasSuffix applies the HasSuffix predicate on the "audio" field.
func AudioHasSuffix(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAudio), v))
	})
}

// AudioEqualFold applies the EqualFold predicate on the "audio" field.
func AudioEqualFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAudio), v))
	})
}

// AudioContainsFold applies the ContainsFold predicate on the "audio" field.
func AudioContainsFold(v string) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAudio), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StarDict) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StarDict) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StarDict) predicate.StarDict {
	return predicate.StarDict(func(s *sql.Selector) {
		p(s.Not())
	})
}
