// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"telegram-bot/internal/ent/words"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Words is the model entity for the Words schema.
type Words struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Word holds the value of the "word" field.
	// 词汇
	Word string `json:"word,omitempty"`
	// Explain holds the value of the "explain" field.
	// 解释词汇
	Explain string `json:"explain,omitempty"`
	// Phonetic holds the value of the "phonetic" field.
	// 音标
	Phonetic string `json:"phonetic,omitempty"`
	// Frequency holds the value of the "frequency" field.
	// 出现频率
	Frequency int `json:"frequency,omitempty"`
	// LastShowTime holds the value of the "last_show_time" field.
	// 最近一次出现时间
	LastShowTime time.Time `json:"last_show_time,omitempty"`
	// IsHide holds the value of the "is_hide" field.
	// 隐藏单词
	IsHide bool `json:"is_hide,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// DeleteTime holds the value of the "delete_time" field.
	// 删除时间
	DeleteTime time.Time `json:"delete_time,omitempty"`
	// IsDelete holds the value of the "is_delete" field.
	// 软删除
	IsDelete bool `json:"is_delete,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Words) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case words.FieldIsHide, words.FieldIsDelete:
			values[i] = new(sql.NullBool)
		case words.FieldID, words.FieldFrequency:
			values[i] = new(sql.NullInt64)
		case words.FieldWord, words.FieldExplain, words.FieldPhonetic:
			values[i] = new(sql.NullString)
		case words.FieldLastShowTime, words.FieldCreateTime, words.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Words", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Words fields.
func (w *Words) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case words.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case words.FieldWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word", values[i])
			} else if value.Valid {
				w.Word = value.String
			}
		case words.FieldExplain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field explain", values[i])
			} else if value.Valid {
				w.Explain = value.String
			}
		case words.FieldPhonetic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phonetic", values[i])
			} else if value.Valid {
				w.Phonetic = value.String
			}
		case words.FieldFrequency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frequency", values[i])
			} else if value.Valid {
				w.Frequency = int(value.Int64)
			}
		case words.FieldLastShowTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_show_time", values[i])
			} else if value.Valid {
				w.LastShowTime = value.Time
			}
		case words.FieldIsHide:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hide", values[i])
			} else if value.Valid {
				w.IsHide = value.Bool
			}
		case words.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				w.CreateTime = value.Time
			}
		case words.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				w.DeleteTime = value.Time
			}
		case words.FieldIsDelete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_delete", values[i])
			} else if value.Valid {
				w.IsDelete = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Words.
// Note that you need to call Words.Unwrap() before calling this method if this Words
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Words) Update() *WordsUpdateOne {
	return (&WordsClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Words entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Words) Unwrap() *Words {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Words is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Words) String() string {
	var builder strings.Builder
	builder.WriteString("Words(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", word=")
	builder.WriteString(w.Word)
	builder.WriteString(", explain=")
	builder.WriteString(w.Explain)
	builder.WriteString(", phonetic=")
	builder.WriteString(w.Phonetic)
	builder.WriteString(", frequency=")
	builder.WriteString(fmt.Sprintf("%v", w.Frequency))
	builder.WriteString(", last_show_time=")
	builder.WriteString(w.LastShowTime.Format(time.ANSIC))
	builder.WriteString(", is_hide=")
	builder.WriteString(fmt.Sprintf("%v", w.IsHide))
	builder.WriteString(", create_time=")
	builder.WriteString(w.CreateTime.Format(time.ANSIC))
	builder.WriteString(", delete_time=")
	builder.WriteString(w.DeleteTime.Format(time.ANSIC))
	builder.WriteString(", is_delete=")
	builder.WriteString(fmt.Sprintf("%v", w.IsDelete))
	builder.WriteByte(')')
	return builder.String()
}

// WordsSlice is a parsable slice of Words.
type WordsSlice []*Words

func (w WordsSlice) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
