// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegram-bot/internal/ent/predicate"
	"telegram-bot/internal/ent/stardict"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StarDictUpdate is the builder for updating StarDict entities.
type StarDictUpdate struct {
	config
	hooks    []Hook
	mutation *StarDictMutation
}

// Where appends a list predicates to the StarDictUpdate builder.
func (sdu *StarDictUpdate) Where(ps ...predicate.StarDict) *StarDictUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetWord sets the "word" field.
func (sdu *StarDictUpdate) SetWord(s string) *StarDictUpdate {
	sdu.mutation.SetWord(s)
	return sdu
}

// SetSw sets the "sw" field.
func (sdu *StarDictUpdate) SetSw(s string) *StarDictUpdate {
	sdu.mutation.SetSw(s)
	return sdu
}

// SetPhonetic sets the "phonetic" field.
func (sdu *StarDictUpdate) SetPhonetic(s string) *StarDictUpdate {
	sdu.mutation.SetPhonetic(s)
	return sdu
}

// SetNillablePhonetic sets the "phonetic" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillablePhonetic(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetPhonetic(*s)
	}
	return sdu
}

// SetDefinition sets the "definition" field.
func (sdu *StarDictUpdate) SetDefinition(s string) *StarDictUpdate {
	sdu.mutation.SetDefinition(s)
	return sdu
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableDefinition(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetDefinition(*s)
	}
	return sdu
}

// SetTranslation sets the "translation" field.
func (sdu *StarDictUpdate) SetTranslation(s string) *StarDictUpdate {
	sdu.mutation.SetTranslation(s)
	return sdu
}

// SetNillableTranslation sets the "translation" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableTranslation(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetTranslation(*s)
	}
	return sdu
}

// SetPos sets the "pos" field.
func (sdu *StarDictUpdate) SetPos(s string) *StarDictUpdate {
	sdu.mutation.SetPos(s)
	return sdu
}

// SetNillablePos sets the "pos" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillablePos(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetPos(*s)
	}
	return sdu
}

// SetCollins sets the "collins" field.
func (sdu *StarDictUpdate) SetCollins(i int) *StarDictUpdate {
	sdu.mutation.ResetCollins()
	sdu.mutation.SetCollins(i)
	return sdu
}

// SetNillableCollins sets the "collins" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableCollins(i *int) *StarDictUpdate {
	if i != nil {
		sdu.SetCollins(*i)
	}
	return sdu
}

// AddCollins adds i to the "collins" field.
func (sdu *StarDictUpdate) AddCollins(i int) *StarDictUpdate {
	sdu.mutation.AddCollins(i)
	return sdu
}

// SetOxford sets the "oxford" field.
func (sdu *StarDictUpdate) SetOxford(i int) *StarDictUpdate {
	sdu.mutation.ResetOxford()
	sdu.mutation.SetOxford(i)
	return sdu
}

// SetNillableOxford sets the "oxford" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableOxford(i *int) *StarDictUpdate {
	if i != nil {
		sdu.SetOxford(*i)
	}
	return sdu
}

// AddOxford adds i to the "oxford" field.
func (sdu *StarDictUpdate) AddOxford(i int) *StarDictUpdate {
	sdu.mutation.AddOxford(i)
	return sdu
}

// SetTag sets the "tag" field.
func (sdu *StarDictUpdate) SetTag(s string) *StarDictUpdate {
	sdu.mutation.SetTag(s)
	return sdu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableTag(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetTag(*s)
	}
	return sdu
}

// SetBnc sets the "bnc" field.
func (sdu *StarDictUpdate) SetBnc(i int) *StarDictUpdate {
	sdu.mutation.ResetBnc()
	sdu.mutation.SetBnc(i)
	return sdu
}

// AddBnc adds i to the "bnc" field.
func (sdu *StarDictUpdate) AddBnc(i int) *StarDictUpdate {
	sdu.mutation.AddBnc(i)
	return sdu
}

// SetFrq sets the "frq" field.
func (sdu *StarDictUpdate) SetFrq(i int) *StarDictUpdate {
	sdu.mutation.ResetFrq()
	sdu.mutation.SetFrq(i)
	return sdu
}

// AddFrq adds i to the "frq" field.
func (sdu *StarDictUpdate) AddFrq(i int) *StarDictUpdate {
	sdu.mutation.AddFrq(i)
	return sdu
}

// SetExchange sets the "exchange" field.
func (sdu *StarDictUpdate) SetExchange(s string) *StarDictUpdate {
	sdu.mutation.SetExchange(s)
	return sdu
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableExchange(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetExchange(*s)
	}
	return sdu
}

// SetDetail sets the "detail" field.
func (sdu *StarDictUpdate) SetDetail(s string) *StarDictUpdate {
	sdu.mutation.SetDetail(s)
	return sdu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableDetail(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetDetail(*s)
	}
	return sdu
}

// SetAudio sets the "audio" field.
func (sdu *StarDictUpdate) SetAudio(s string) *StarDictUpdate {
	sdu.mutation.SetAudio(s)
	return sdu
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (sdu *StarDictUpdate) SetNillableAudio(s *string) *StarDictUpdate {
	if s != nil {
		sdu.SetAudio(*s)
	}
	return sdu
}

// Mutation returns the StarDictMutation object of the builder.
func (sdu *StarDictUpdate) Mutation() *StarDictMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *StarDictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sdu.hooks) == 0 {
		if err = sdu.check(); err != nil {
			return 0, err
		}
		affected, err = sdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StarDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sdu.check(); err != nil {
				return 0, err
			}
			sdu.mutation = mutation
			affected, err = sdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdu.hooks) - 1; i >= 0; i-- {
			if sdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *StarDictUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *StarDictUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *StarDictUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *StarDictUpdate) check() error {
	if v, ok := sdu.mutation.Word(); ok {
		if err := stardict.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "StarDict.word": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Sw(); ok {
		if err := stardict.SwValidator(v); err != nil {
			return &ValidationError{Name: "sw", err: fmt.Errorf(`ent: validator failed for field "StarDict.sw": %w`, err)}
		}
	}
	return nil
}

func (sdu *StarDictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stardict.Table,
			Columns: stardict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stardict.FieldID,
			},
		},
	}
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldWord,
		})
	}
	if value, ok := sdu.mutation.Sw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldSw,
		})
	}
	if value, ok := sdu.mutation.Phonetic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPhonetic,
		})
	}
	if value, ok := sdu.mutation.Definition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDefinition,
		})
	}
	if value, ok := sdu.mutation.Translation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTranslation,
		})
	}
	if value, ok := sdu.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPos,
		})
	}
	if value, ok := sdu.mutation.Collins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldCollins,
		})
	}
	if value, ok := sdu.mutation.AddedCollins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldCollins,
		})
	}
	if value, ok := sdu.mutation.Oxford(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldOxford,
		})
	}
	if value, ok := sdu.mutation.AddedOxford(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldOxford,
		})
	}
	if value, ok := sdu.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTag,
		})
	}
	if value, ok := sdu.mutation.Bnc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldBnc,
		})
	}
	if value, ok := sdu.mutation.AddedBnc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldBnc,
		})
	}
	if value, ok := sdu.mutation.Frq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldFrq,
		})
	}
	if value, ok := sdu.mutation.AddedFrq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldFrq,
		})
	}
	if value, ok := sdu.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldExchange,
		})
	}
	if value, ok := sdu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDetail,
		})
	}
	if value, ok := sdu.mutation.Audio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldAudio,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stardict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StarDictUpdateOne is the builder for updating a single StarDict entity.
type StarDictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StarDictMutation
}

// SetWord sets the "word" field.
func (sduo *StarDictUpdateOne) SetWord(s string) *StarDictUpdateOne {
	sduo.mutation.SetWord(s)
	return sduo
}

// SetSw sets the "sw" field.
func (sduo *StarDictUpdateOne) SetSw(s string) *StarDictUpdateOne {
	sduo.mutation.SetSw(s)
	return sduo
}

// SetPhonetic sets the "phonetic" field.
func (sduo *StarDictUpdateOne) SetPhonetic(s string) *StarDictUpdateOne {
	sduo.mutation.SetPhonetic(s)
	return sduo
}

// SetNillablePhonetic sets the "phonetic" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillablePhonetic(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetPhonetic(*s)
	}
	return sduo
}

// SetDefinition sets the "definition" field.
func (sduo *StarDictUpdateOne) SetDefinition(s string) *StarDictUpdateOne {
	sduo.mutation.SetDefinition(s)
	return sduo
}

// SetNillableDefinition sets the "definition" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableDefinition(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetDefinition(*s)
	}
	return sduo
}

// SetTranslation sets the "translation" field.
func (sduo *StarDictUpdateOne) SetTranslation(s string) *StarDictUpdateOne {
	sduo.mutation.SetTranslation(s)
	return sduo
}

// SetNillableTranslation sets the "translation" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableTranslation(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetTranslation(*s)
	}
	return sduo
}

// SetPos sets the "pos" field.
func (sduo *StarDictUpdateOne) SetPos(s string) *StarDictUpdateOne {
	sduo.mutation.SetPos(s)
	return sduo
}

// SetNillablePos sets the "pos" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillablePos(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetPos(*s)
	}
	return sduo
}

// SetCollins sets the "collins" field.
func (sduo *StarDictUpdateOne) SetCollins(i int) *StarDictUpdateOne {
	sduo.mutation.ResetCollins()
	sduo.mutation.SetCollins(i)
	return sduo
}

// SetNillableCollins sets the "collins" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableCollins(i *int) *StarDictUpdateOne {
	if i != nil {
		sduo.SetCollins(*i)
	}
	return sduo
}

// AddCollins adds i to the "collins" field.
func (sduo *StarDictUpdateOne) AddCollins(i int) *StarDictUpdateOne {
	sduo.mutation.AddCollins(i)
	return sduo
}

// SetOxford sets the "oxford" field.
func (sduo *StarDictUpdateOne) SetOxford(i int) *StarDictUpdateOne {
	sduo.mutation.ResetOxford()
	sduo.mutation.SetOxford(i)
	return sduo
}

// SetNillableOxford sets the "oxford" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableOxford(i *int) *StarDictUpdateOne {
	if i != nil {
		sduo.SetOxford(*i)
	}
	return sduo
}

// AddOxford adds i to the "oxford" field.
func (sduo *StarDictUpdateOne) AddOxford(i int) *StarDictUpdateOne {
	sduo.mutation.AddOxford(i)
	return sduo
}

// SetTag sets the "tag" field.
func (sduo *StarDictUpdateOne) SetTag(s string) *StarDictUpdateOne {
	sduo.mutation.SetTag(s)
	return sduo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableTag(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetTag(*s)
	}
	return sduo
}

// SetBnc sets the "bnc" field.
func (sduo *StarDictUpdateOne) SetBnc(i int) *StarDictUpdateOne {
	sduo.mutation.ResetBnc()
	sduo.mutation.SetBnc(i)
	return sduo
}

// AddBnc adds i to the "bnc" field.
func (sduo *StarDictUpdateOne) AddBnc(i int) *StarDictUpdateOne {
	sduo.mutation.AddBnc(i)
	return sduo
}

// SetFrq sets the "frq" field.
func (sduo *StarDictUpdateOne) SetFrq(i int) *StarDictUpdateOne {
	sduo.mutation.ResetFrq()
	sduo.mutation.SetFrq(i)
	return sduo
}

// AddFrq adds i to the "frq" field.
func (sduo *StarDictUpdateOne) AddFrq(i int) *StarDictUpdateOne {
	sduo.mutation.AddFrq(i)
	return sduo
}

// SetExchange sets the "exchange" field.
func (sduo *StarDictUpdateOne) SetExchange(s string) *StarDictUpdateOne {
	sduo.mutation.SetExchange(s)
	return sduo
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableExchange(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetExchange(*s)
	}
	return sduo
}

// SetDetail sets the "detail" field.
func (sduo *StarDictUpdateOne) SetDetail(s string) *StarDictUpdateOne {
	sduo.mutation.SetDetail(s)
	return sduo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableDetail(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetDetail(*s)
	}
	return sduo
}

// SetAudio sets the "audio" field.
func (sduo *StarDictUpdateOne) SetAudio(s string) *StarDictUpdateOne {
	sduo.mutation.SetAudio(s)
	return sduo
}

// SetNillableAudio sets the "audio" field if the given value is not nil.
func (sduo *StarDictUpdateOne) SetNillableAudio(s *string) *StarDictUpdateOne {
	if s != nil {
		sduo.SetAudio(*s)
	}
	return sduo
}

// Mutation returns the StarDictMutation object of the builder.
func (sduo *StarDictUpdateOne) Mutation() *StarDictMutation {
	return sduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *StarDictUpdateOne) Select(field string, fields ...string) *StarDictUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated StarDict entity.
func (sduo *StarDictUpdateOne) Save(ctx context.Context) (*StarDict, error) {
	var (
		err  error
		node *StarDict
	)
	if len(sduo.hooks) == 0 {
		if err = sduo.check(); err != nil {
			return nil, err
		}
		node, err = sduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StarDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sduo.check(); err != nil {
				return nil, err
			}
			sduo.mutation = mutation
			node, err = sduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sduo.hooks) - 1; i >= 0; i-- {
			if sduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *StarDictUpdateOne) SaveX(ctx context.Context) *StarDict {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *StarDictUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *StarDictUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *StarDictUpdateOne) check() error {
	if v, ok := sduo.mutation.Word(); ok {
		if err := stardict.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "StarDict.word": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Sw(); ok {
		if err := stardict.SwValidator(v); err != nil {
			return &ValidationError{Name: "sw", err: fmt.Errorf(`ent: validator failed for field "StarDict.sw": %w`, err)}
		}
	}
	return nil
}

func (sduo *StarDictUpdateOne) sqlSave(ctx context.Context) (_node *StarDict, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stardict.Table,
			Columns: stardict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stardict.FieldID,
			},
		},
	}
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StarDict.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stardict.FieldID)
		for _, f := range fields {
			if !stardict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stardict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldWord,
		})
	}
	if value, ok := sduo.mutation.Sw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldSw,
		})
	}
	if value, ok := sduo.mutation.Phonetic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPhonetic,
		})
	}
	if value, ok := sduo.mutation.Definition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDefinition,
		})
	}
	if value, ok := sduo.mutation.Translation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTranslation,
		})
	}
	if value, ok := sduo.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldPos,
		})
	}
	if value, ok := sduo.mutation.Collins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldCollins,
		})
	}
	if value, ok := sduo.mutation.AddedCollins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldCollins,
		})
	}
	if value, ok := sduo.mutation.Oxford(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldOxford,
		})
	}
	if value, ok := sduo.mutation.AddedOxford(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldOxford,
		})
	}
	if value, ok := sduo.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldTag,
		})
	}
	if value, ok := sduo.mutation.Bnc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldBnc,
		})
	}
	if value, ok := sduo.mutation.AddedBnc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldBnc,
		})
	}
	if value, ok := sduo.mutation.Frq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldFrq,
		})
	}
	if value, ok := sduo.mutation.AddedFrq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stardict.FieldFrq,
		})
	}
	if value, ok := sduo.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldExchange,
		})
	}
	if value, ok := sduo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldDetail,
		})
	}
	if value, ok := sduo.mutation.Audio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stardict.FieldAudio,
		})
	}
	_node = &StarDict{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stardict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
